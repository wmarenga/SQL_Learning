/* 
1) Abrir Microsoft SQL Server Management Studio;
2) Logar com a senha do computador ou login: sa/ password: ******
3) Clicar em New Query;
4) Criar database (create database aula_sql), aceita sem limitador ;
5) Pressionar Refresh(F5) em Object Explorer para exibir a database criada;

Atenção! quando abrimos uma New Query o ID ao lado do usuário muda (primeira aba => 54), (segunda aba => 55)
EVITAR ABRIR MUITAS ABAS, POIS O SQL SERVER PODE TRAVAR (<3 ABAS É O IDEAL)

create database aula_sql
create database aula_sql02

use aula_sql

create table teste(
	nome varchar(30)
)

TENTANDO CRIAR UM BANCO E UMA TABELA EM BLOCO (usamos o comando GO)
	
SEM delimitador ;
   
create database BANCO01

use BANCO01

create table teste(
	nome varchar(30)
)
   
COM delimitador ;
   
create database BANCO03;

use BANCO03;

create table teste(
	nome varchar(30)
);
   
*** SELECIONANDO E RODANDO TUDO JUNTO APRESENTA ERRO.
O SQL Server apresenta um processamento ASSÍNCRONO => sem ordem.

Para resolver usamos o comando GO:
*** No SQL Server não é comum usarmos o delimitador ; ***

cliente ----------------------------- server

Quando utilizamos o comando GO, estamos enviando QUEBRADOS pacotes do cliente para o servidor
na ordem que digitamos (PACOTE POR PACOTE). Com isso não deixamos o servidor determinar a ordem assíncrona
por comando menos custoso para o servidor (use, create database e create table).

USANDO O GO PARA RODAR TODOS OS COMANDOS JUNTOS

create database BANCO04
GO

use BANCO04
GO

create table teste(
	nome varchar(30)
)
GO
*/

/* ARQUITETURA DO SQL Server 

A arquitetura é como se comportam os arquivos que compõem o banco de dados.

1) Clicar com botão direito em qualquer banco/ propriedades/ arquivos;
- Logical Name => nome do arquivo no banco SQL;
- Path => caminho do arquivo no PC;
- File Name => nome e extensão do arquivo no PC

RECOMENDAÇÕES:
- Instalar o SQL Server em um HD/ SSD diferente do Windows;
- Armazenar os arquivos MDF e LDF em um HD/SSD diferente do Windows e do SQL Server.
Isto é importante para melhorar a performance.

MDF => Master Data File (armazena os dados), gerando o MDF eu estou gerando uma transação (bancos transacionais)
No MDF temos os dicionários do sistema.
.NDF => Not Master Data File (utilizado para organizar em grupos de dados.)
(indicar para a tabela a qual grupo ela vai pertencer)
G01 <= xyz.NDF => G_MKT 
G02 <= ABCD.NDF => G_RH
G03 <= GHI.NDF => G_Vendas

LDF => Log Data File (armazena logs)

O que é uma transação => Executa um bloco de comandos (transações) (ex. insert) no arquivo de log (LDF) e MDF, 
indivisível (atomicidade). Tudo é feito por comandos: begin ... commit (Ok, tudo está certo, salve no banco => MDF).
O comando rollback volta tudo ao estado anterior.
*/

/* APAGANDO BANCOS 

1) CLICAR COM BOTÃO DIREITO NO BANCO E DELETE;
2) POR COMANDO:
drop database nome_banco
GO
<refresh><F5>
*/

/* ORGANIZAR FISICAMENTE E LOGICAMENTE UM BANCO DE DADOS:

1) CRIAR O BANCO COM ARQUIVOS PARA OS SETORES DE MKT E VENDAS;
2) CRIAR UM ARQUIVO GERAL;
3) DEIXAR O MDF APENAS COM O DICIONARIO DE DADOS;
4) CRIAR 2 GRUPOS DE ARQUIVOS (PRIMARY <- MDF). O ARQUIVO MDF SEMPRE VAI DENTRO DO PRIMARY GROUP.

CRIANDO A DATABASE:
1) BOTÃO DIREITO EM DATABASES/ NEW DATABASE;
2) NA ABA GERAL INSERIR A DATABASE NAME: XXXXXX;
3) NA ABA FILEGROUP/ ADD FILEGROUP
4) MARCAR COMO DEFAULT => GA_VENDAS. ESTAMS DETERMINANDO QUE TODOS OS DADOS SEJAM DIRECIONADOS PARA GERAL E NÃO PARA PRIMARY (MDF).
5) EM GENERAL/ ADD, CRIAMOS OS ARQUIVOS :
Logical Name: MARKETING/ File Name (nome físico): MARKETING.ndf
Logical Name: VENDAS/ File Name (nome físico): VENDAS.ndf

Em Autogrowth/ Maxisize, nos determinamos o quanto o banco irá expandir quando encher:
File Group: In Percent(crescer 10%) ou In Megabytes (crescer 10Mb);
Maximum FIle Size (Limite de crescimento): Limited File Size (MB): 100 ou Unlimited.

Atenção! Quando o limite determinado é alcançado o banco para.
<OK>
<F5>

6) BOTÃO DIREITO EM EMPRESA (DATABASE)/ PROPRIEDADES/ ARQUIVOS
7) COPIAR O PATH DO ARQUIVO E BUSCAR A PASTA NO WINDOWS;
- EMPRESA (MDF) E EMPRESA.LOG (LDF)
- GERAL/ MARKETING/ VENDAS (NDF) => FILE GROUP
8) CRIAR TABELAS (MODO GRÁFICO):

PRIMEIRA TABELA:
- BOTÃO DIREITO EM EMPRESA/ TABLES;
- CLICK EM TABLES;
  > Column Name: id/ Data Type: int/ Allow Nulls: no
  > Column Name: nome/ Data Type: varchar/ Allow Nulls: no

Painel direito:
(Identity): Name: TB_MKT
Regular Data Space Specification/ FileGroup or Partition Scheme Name: GA_MARKETING
<SAVE>

SEGUNDA TABELA:
- BOTÃO DIREITO EM EMPRESA/ TABLES;
- CLICK EM TABLES;
  > Column Name: id/ Data Type: int/ Allow Nulls: no
  > Column Name: nome/ Data Type: varchar/ Allow Nulls: no

Painel direito:
(Identity): Name: TB_VENDAS
Regular Data Space Specification/ FileGroup or Partition Scheme Name: GA_VENDAS
<SAVE>

OBS: O SQL SERVER TEM UMA CARACTERÍSTICA CHAMA "FILESTREAM" => CAPACIDADE DE ARMAZENAR ARQUIVOS DENTRO DE TABELAS (.doc, .pdf, .jpg).
SENDO ASSIM PODEMOS DETERMINAR UM GRUPO SEPARADO PARA ESTES ARQUIVOS (COM UM HD MAIOR). ESTA OPÇÃO PODE SER CONFIGURADA EM Text/Image Filegroup.

TERCEIRA TABELA (COMANDO):

USE EMPRESA
CREATE TABLE TB_EMPRESA(
	ID INT,
	NOME VARCHAR(50)
)
GO

- BOTÃO DIREITO EM: EMPRESA/ TABLES/ dbo.TB_EMPRESA/ Design (ABRE A TELA PARA CONFIGURAR)
*/


/* CONECTANDO A UM BANCO */

USE EMPRESA
GO

/*CRIACAO DE TABELAS */

/* IDENTITY(1, 1) (INICIAL EM 1, INCREMENTA DE 1 EM 1) => DEFAULT (SQL SERVER) = AUTO_INCREMENT (MYSQL) */
/* NÃO EXISTE ENUM NO SQL SERVER */

CREATE TABLE ALUNO(
	ID_ALUNO INT PRIMARY KEY IDENTITY,
	NOME VARCHAR(30) NOT NULL,
	SEXO CHAR(1) NOT NULL,
	NASCIMENTO DATE NOT NULL,
	EMAIL VARCHAR(30) UNIQUE
)
GO

/*CONSTRAINTS => DEFININDO UM ENUM (CHECK) */
/* DEVEMOS CRIAR CONSTRAINTS POR FORA DA TABELA PARA EVITAR NOMES ALEATÓRIOS */

ALTER TABLE ALUNO
ADD CONSTRAINT CK_SEXO CHECK (SEXO IN('M','F'))
GO

/* 1 X 1 */

CREATE TABLE ENDERECO(
	ID_ENDERECO INT PRIMARY KEY IDENTITY(100,10),
	BAIRRO VARCHAR(30),
	UF CHAR(2) NOT NULL,
	CHECK (UF IN('RJ','SP','MG')),
	FK_ID_ALUNO INT UNIQUE
)
GO

/* CRIANDO A FK */

ALTER TABLE ENDERECO ADD CONSTRAINT FK_ENDERECO_ALUNO
FOREIGN KEY(FK_ID_ALUNO) REFERENCES ALUNO(ID_ALUNO)
GO

/* COMANDOS DE DESCRICAO */

/* PROCEDURES - JA CRIADAS E ARMAZENAS NO SISTEMA (SP_ => STORAGE PROCEDURE)*/
/* NO MYSQL => DESC/ SHOW CREATE TABLE */

SP_COLUMNS ALUNO
GO

/* MAIS COMPLETO E DETALHADO */
SP_HELP ALUNO
GO

/* OWNER dbo => Data Base Owner */
/* Collation => tipo de caracteres. No SQL Server podemos definir o tipo de collation na instáncia (na instalação), no banco todo,
para tabela inteira ou até mesmo em colunas. */

/* INSERINDO DADOS */
/* NO MYSQL TÍNHAMOS QUE PASSAR NULL PARA A PK => INSERT INTO ALUNO VALUES(NULL,'ANDRE','M','1981/12/09','ANDRE@IG.COM'). 
CONTUDO NO SQL SERVER NÃO PRECISAMOS INFORMAR NADA.
*/
/* DATA FORMAT => yyyy/mm/dd */

INSERT INTO ALUNO VALUES('ANDRE','M','1981/12/09','ANDRE@IG.COM')
INSERT INTO ALUNO VALUES('ANA','F','1978/03/09','ANA@IG.COM')
INSERT INTO ALUNO VALUES('RUI','M','1951/07/09','RUI@IG.COM')
INSERT INTO ALUNO VALUES('JOAO','M','2002/11/09','JOAO@IG.COM')
GO

SELECT * FROM ALUNO
GO

/* ENDERECO */

INSERT INTO ENDERECO VALUES('FLAMENGO','RJ',1)
INSERT INTO ENDERECO VALUES('MORUMBI','SP',2)
INSERT INTO ENDERECO VALUES('CENTRO','MG',3)
INSERT INTO ENDERECO VALUES('CENTRO','SP',4)
GO

/* CRIANDO A TABELA TELEFONES 1 X N (SEM UNIQUE) */
CREATE TABLE TELEFONE(
	ID_TELEFONE INT PRIMARY KEY IDENTITY,
	TIPO CHAR(3) NOT NULL,
	NUMERO VARCHAR(10) NOT NULL,
	FK_ID_ALUNO INT,
	CHECK (TIPO IN ('RES','COM','CEL'))
)
GO


INSERT INTO TELEFONE VALUES('CEL','7899889',1)
INSERT INTO TELEFONE VALUES('RES','4325444',1)
INSERT INTO TELEFONE VALUES('COM','4354354',2)
INSERT INTO TELEFONE VALUES('CEL','2344556',2)
GO

SELECT * FROM ALUNO
GO

/* PEGAR DATA ATUAL */

SELECT GETDATE() AS DATA_ATUAL
GO

/* CLAUSULA AMBIGUA = COLUNAS IGUAIS EM MAIS DE UMA TABELA */

SELECT A.NOME, T.TIPO, T.NUMERO, E.BAIRRO, E.UF
FROM ALUNO A
INNER JOIN TELEFONE T
ON A.ID_ALUNO = T.FK_ID_ALUNO
INNER JOIN ENDERECO E
ON A.ID_ALUNO = E.FK_ID_ALUNO
GO

/* PARA TRAZER TODOS OS ALUNOS USAR "LEFT JOIN". PARA TRAZER INCLUSIVE OS ALUNOS SEM TELEFONE USAR O "RIGHT JOIN" OU OMITIR POIS É DEFAULT. */
SELECT A.NOME, T.TIPO, T.NUMERO, E.BAIRRO, E.UF
FROM ALUNO A LEFT JOIN TELEFONE T
ON A.ID_ALUNO = T.FK_ID_ALUNO
INNER JOIN ENDERECO E
ON A.ID_ALUNO = E.FK_ID_ALUNO
GO

/* IFNULL */

SELECT  A.NOME, 
		ISNULL(T.TIPO, '***') AS "TIPO", 
		ISNULL(T.NUMERO,'**SEM NUM**') AS "TELEFONE", 
		E.BAIRRO, 
		E.UF
FROM ALUNO A LEFT JOIN TELEFONE T
ON A.ID_ALUNO = T.FK_ID_ALUNO
INNER JOIN ENDERECO E
ON A.ID_ALUNO = E.FK_ID_ALUNO
GO

/* DATAS */

SELECT * FROM ALUNO
GO

SELECT NOME, NASCIMENTO
FROM ALUNO
GO

/* DATEDIFF - CALCULA A DIFERENÇA ENTRE 2 DATAS 
FUNCAO GETDATE() TRAZ DIA E HORA
*/

SELECT NOME, GETDATE() AS DIA_HORA FROM ALUNO
GO

/* 1 PASSO */

SELECT NOME, DATEDIFF(DAY,NASCIMENTO,GETDATE()) 
FROM ALUNO
GO

/* 2 PASSO (interval, starting_date datetime, ending_date datetime) RETURNS int* => EM DIAS */
/* FUNCIONA COM OU SEM ASPAS */

SELECT NOME, DATEDIFF(DAY,NASCIMENTO,GETDATE()) AS "IDADE"
FROM ALUNO
GO

SELECT NOME, DATEDIFF(DAY,NASCIMENTO,GETDATE()) IDADE
FROM ALUNO
GO

/* 3 PASSO - RETORNO EM INTEIRO + OPER MATEMATICA */

SELECT NOME, (DATEDIFF(DAY,NASCIMENTO,GETDATE())/365) AS "IDADE"
FROM ALUNO
GO

SELECT NOME, (DATEDIFF(MONTH,NASCIMENTO,GETDATE())/12) AS "IDADE"
FROM ALUNO
GO

/* (interval, starting_date datetime, ending_date datetime) RETURNS int* => EM ANOS */
SELECT NOME, DATEDIFF(YEAR,NASCIMENTO,GETDATE()) AS "IDADE"
FROM ALUNO
GO

/* DATENAME - TRAZ O NOME DA PARTE DA DATA EM QUESTAO - STRING */

SELECT NOME, DATENAME(MONTH, NASCIMENTO) AS MES_NASC
FROM ALUNO
GO

SELECT NOME, DATENAME(YEAR, NASCIMENTO) AS ANO_NASC
FROM ALUNO
GO

SELECT NOME, DATENAME(WEEKDAY, NASCIMENTO) AS DIA_SEM_NASC
FROM ALUNO
GO

/* DATEPART - POREM O RETORNO É UM INTEIRO */

SELECT NOME, DATEPART(MONTH,NASCIMENTO) AS MES_NASC(NUM), DATENAME(MONTH, NASCIMENTO) AS MES_NASC(NOME)
FROM ALUNO
GO

/* DATEADD - RETORNA UMA DATA SOMANDO A OUTRA DATA */
/* (interval, increment int, expression smalldatetime) RETURMS smalldatetime */

SELECT DATEADD(DAY,365,GETDATE())
GO

SELECT DATEADD(YEAR,10,GETDATE())
GO

/* CONVERSAO DE DADOS */

SELECT 1 + '1'
GO

/* O OPERADOR + TAMBÉM CONCATENA STRINGS. FAZ A CONVERSÃO DE STR => NUM, SOMENTE SE FOR INT A CONVERSÃO É AUTOMÁTICA. */
SELECT '1' + '1'
GO

SELECT 'CURSO DE BANCO DE DADOS' + '1'
GO

/* ERRO => NÃO FORÇA A CONVERSÃO DE NUM => STRING */
SELECT 'CURSO DE BANCO DE DADOS' + 1
GO

/* FUNCOES DE CONVERSAO DE DADOS. CAST É UMA CONVERSÃO EXPLÍCITA.  */

SELECT CAST('1' AS INT) + CAST('1' AS INT)
GO

SELECT CAST('1.1' AS FLOAT) + CAST('1.3' AS FLOAT)
GO

/* CONVERSAO E CONCATENACAO 
https://learn.microsoft.com/en-us/sql/t-sql/data-types/data-type-conversion-database-engine?redirectedfrom=MSDN&view=sql-server-ver16
*/

SELECT NOME,
NASCIMENTO
FROM ALUNO
GO

/* DATA NO FORMATO BRASILEIRO. */
SELECT NOME,
DAY(NASCIMENTO) + '/' + MONTH(NASCIMENTO) + '/' + YEAR(NASCIMENTO)
FROM ALUNO
GO

/*EXERCICIO*/

SELECT NOME,
DAY(NASCIMENTO) + '/' + 
MONTH(NASCIMENTO) + '/' + 
YEAR(NASCIMENTO)
FROM ALUNO
GO

/* CORRECAO */

SELECT NOME,
CAST(DAY(NASCIMENTO) AS VARCHAR) + '/' + 
CAST(MONTH(NASCIMENTO) AS VARCHAR) + '/' + 
CAST(YEAR(NASCIMENTO) AS VARCHAR) AS "NASCIMENTO"
FROM ALUNO
GO

SELECT NOME,
CAST(DAY(NASCIMENTO) AS VARCHAR) + ' de ' + 
CAST(DATENAME(MONTH,NASCIMENTO) AS VARCHAR) + ' de ' + 
CAST(YEAR(NASCIMENTO) AS VARCHAR) AS "NASCIMENTO"
FROM ALUNO
GO

/*CHARINDEX - RETORNA UM INTEIRO 
CONTAGEM DEFAULT - INICIA EM 01
(expression varchar(1), expression varchar(1), start_location int) RETURNS int
(o que?, Onde?, A partir de que ocorrência)
*/

SELECT * FROM ALUNO
GO

SELECT NOME, CHARINDEX('A',NOME) AS INDICE
FROM ALUNO
GO 

/* ANDRE => LETRA 'A' NA PRIMEIRA POSIÇÃO
   ANA => LETRA 'A' NA PRIMEIRA POSIÇÃO
   RUI => NÃO POSSUI LETRA 'A' EM NENHUMA POSIÇÃO
   JOAO => LETRA 'A' NA TERCEIRA POSIÇÃO
*/

/* PROCURANDO A PARTIR DA SEGUNDA POSIÇÃO, CONTUDO A PRIMEIRA POSIÇÃO AINDA É CONSIDERADA. */
SELECT NOME, CHARINDEX('A',NOME,2) AS INDICE
FROM ALUNO
GO 

/* BULK INSERT - IMPORTACAO DE ARQUIVOS */

CREATE TABLE LANCAMENTO_CONTABIL(
	CONTA INT,
	VALOR INT,
	DEB_CRED CHAR(1)
)
GO

SELECT * FROM LANCAMENTO_CONTABIL
GO

/* \t = TAB , \n = ENTER*/
/* FIRSTROW = 2, POIS A PRIMEIRA LINHA É CABEÇALHO */

BULK INSERT LANCAMENTO_CONTABIL
FROM 'C:\arquivos\CONTAS.txt'
WITH
(
	FIRSTROW = 2,
	DATAFILETYPE = 'char',
	FIELDTERMINATOR = '\t',
	ROWTERMINATOR = '\n'

)
GO

select * from LANCAMENTO_CONTABIL
GO

/* SE EXISTIREM VALORES NULOS APÓS A ÚLTIMA LINHA. O SQL ADICIONA COMO NULO */
delete from LANCAMENTO_CONTABIL
GO

/* DESAFIO DO SALDO 
QUERY QUE TRAGA O NUMERO DA CONTA
SALDO - DEVEDOR OU CREDOR */

SELECT CONTA, VALOR, DEB_CRED,
CHARINDEX('D',DEB_CRED) AS DEBITO,
CHARINDEX('C',DEB_CRED) AS CREDITO,
CHARINDEX('C',DEB_CRED) * 2 - 1 AS MULTIPLICADOR
FROM LANCAMENTO_CONTABIL
GO


SELECT CONTA,
SUM(VALOR * (CHARINDEX('C',DEB_CRED) * 2 - 1)) AS SALDO
FROM LANCAMENTO_CONTABIL
GROUP BY CONTA
ORDER BY 2
GO

SELECT CONTA,
SUM(VALOR * (CHARINDEX('C',DEB_CRED) * 2 - 1)) AS SALDO
FROM LANCAMENTO_CONTABIL
GROUP BY CONTA
ORDER BY CONTA
GO

/* MINHA SOLUÇÃO */

SELECT CONTA, VALOR, DEB_CRED,
CHARINDEX('D',DEB_CRED) * (-1) AS DEBITO,
CHARINDEX('C',DEB_CRED) AS CREDITO,
CHARINDEX('D',DEB_CRED) * (-1) + CHARINDEX('C',DEB_CRED) AS FATOR_MULT
FROM LANCAMENTO_CONTABIL
GO

SELECT CONTA,
SUM(VALOR * (CHARINDEX('D',DEB_CRED) * (-1) + CHARINDEX('C',DEB_CRED))) AS SALDO
FROM LANCAMENTO_CONTABIL
GROUP BY CONTA
ORDER BY CONTA
GO

SELECT CONTA,
SUM(VALOR * (CHARINDEX('D',DEB_CRED) * (-1) + CHARINDEX('C',DEB_CRED))) AS 'SALDO',
CASE
WHEN SUM(VALOR * (CHARINDEX('D',DEB_CRED) * (-1) + CHARINDEX('C',DEB_CRED))) > 0 THEN 'CREDOR'
WHEN SUM(VALOR * (CHARINDEX('D',DEB_CRED) * (-1) + CHARINDEX('C',DEB_CRED))) < 0 THEN 'DEVEDOR'
END AS SITUACAO
FROM LANCAMENTO_CONTABIL
GROUP BY CONTA
ORDER BY CONTA
GO

/* SOLUCAO COM SUB QUERY */

SELECT CONTA ,SUM(TOTAL)
FROM (SELECT CONTA, TOTAL = CASE
		WHEN DEB_CRED = 'D' THEN VALOR*-1
		WHEN DEB_CRED = 'C' THEN VALOR
	END
FROM LANCAMENTO_CONTABIL) AS D
GROUP BY CONTA
ORDER BY 1
GO

/* TRIGGERS */

/* NUMERIC = FLOAT */
CREATE TABLE PRODUTOS(
	ID_PRODUTO INT IDENTITY PRIMARY KEY,
	NOME VARCHAR(50) NOT NULL,
	CATEGORIA VARCHAR(30) NOT NULL,
	PRECO NUMERIC(10,2) NOT NULL
)
GO

CREATE TABLE HISTORICO(
	ID_OPERACAO INT PRIMARY KEY IDENTITY,
	PRODUTO VARCHAR(50) NOT NULL,
	CATEGORIA VARCHAR(30) NOT NULL,
	PRECO_ANTIGO NUMERIC(10,2) NOT NULL,
	PRECO_NOVO NUMERIC(10,2) NOT NULL,
	DATA DATETIME,
	USUARIO VARCHAR(30),
	MENSAGEM VARCHAR(100)
)
GO

INSERT INTO PRODUTOS VALUES('LIVRO SQL SERVER','LIVROS',98.00)
INSERT INTO PRODUTOS VALUES('LIVRO ORACLE','LIVROS',50.00)
INSERT INTO PRODUTOS VALUES('LICENÇA POWERCENTER','SOFTWARES',45000.00)
INSERT INTO PRODUTOS VALUES('NOTEBOOK I7','COMPUTADORES',3150.00)
INSERT INTO PRODUTOS VALUES('LIVRO BUSINESS INTELLIGENCE','LIVROS',90.00)
GO

SELECT * FROM PRODUTOS
SELECT * FROM HISTORICO
GO

/* VERIFICANDO O USUARIO */

SELECT SUSER_NAME()
GO

/* TRIGGER DE DADOS - DATA MANIPULATION LANGUAGE (DML) */
/* dbo => DATA BASE OWNER */
/* DECLARE @NOME => DECLARAÇÃO DE VARIÁVEIS */

CREATE TRIGGER TRG_ATUALIZA_PRECO
ON DBO.PRODUTOS
FOR UPDATE
AS
		DECLARE @ID_PRODUTO INT
		DECLARE @PRODUTO VARCHAR(30)
		DECLARE @CATEGORIA VARCHAR(10)
		DECLARE @PRECO NUMERIC(10,2)
		DECLARE @PRECO_NOVO NUMERIC(10,2)
		DECLARE @DATA DATETIME
		DECLARE @USUARIO VARCHAR(30)
		DECLARE @ACAO VARCHAR(100)

		--PRIMEIRO BLOCO => POR BOA PRATICA, VALORES PROVENIENTES DE TABELAS SÃO INSERIDOS COM O COMANDO "SELECT"
		/* ATENÇÃO POIS PRECO É O PRECO ANTIGO */
		SELECT @ID_PRODUTO = ID_PRODUTO FROM inserted
		SELECT @PRODUTO = NOME FROM inserted
		SELECT @CATEGORIA = CATEGORIA FROM inserted
		SELECT @PRECO = PRECO FROM deleted
		SELECT @PRECO_NOVO = PRECO FROM inserted

		--SEGUNDO BLOCO => POR BOA PRATICA, VALORES PROVENIENTES DE FUNÇÕES OU VALORES LITERAIS, DEVEM SER ATRIBUIDOS COM O COMANDO "SET"
		/* VALORES PROVENIENTES DE FUNÇÕES */
		SET @DATA = GETDATE()
		SET @USUARIO = SUSER_NAME()
		/* VALOR LITERAL */
		SET @ACAO = 'VALOR INSERIDO PELA TRIGGER TRG_ATUALIZA_PRECO'

		INSERT INTO HISTORICO
		(PRODUTO,CATEGORIA,PRECO_ANTIGO,PRECO_NOVO,DATA,USUARIO,MENSAGEM)
		VALUES
		(@PRODUTO,@CATEGORIA,@PRECO,@PRECO_NOVO,@DATA,@USUARIO,@ACAO)

		PRINT 'TRIGGER EXECUTADA COM SUCESSO'
GO

/* EXECUTANDO UM UPDATE */

UPDATE PRODUTOS SET PRECO = 100.00
WHERE ID_PRODUTO = 1
GO

SELECT * FROM PRODUTOS
SELECT * FROM HISTORICO
GO

UPDATE PRODUTOS SET NOME = 'LIVRO C#'
WHERE ID_PRODUTO = 1
GO

/* PROGRAMANDO TRIGGER EM UMA COLUNA => T-SQL */

DROP TRIGGER TRG_ATUALIZA_PRECO
GO

CREATE TRIGGER TRG_ATUALIZA_PRECO
ON DBO.PRODUTOS
FOR UPDATE AS
IF UPDATE(PRECO)
BEGIN

		DECLARE @ID_PRODUTO INT
		DECLARE @PRODUTO VARCHAR(30)
		DECLARE @CATEGORIA VARCHAR(10)
		DECLARE @PRECO NUMERIC(10,2)
		DECLARE @PRECO_NOVO NUMERIC(10,2)
		DECLARE @DATA DATETIME
		DECLARE @USUARIO VARCHAR(30)
		DECLARE @ACAO VARCHAR(100)

		--PRIMEIRO BLOCO
		SELECT @ID_PRODUTO = ID_PRODUTO FROM inserted
		SELECT @PRODUTO = NOME FROM inserted
		SELECT @CATEGORIA = CATEGORIA FROM inserted
		SELECT @PRECO = PRECO FROM deleted
		SELECT @PRECO_NOVO = PRECO FROM inserted

		--SEGUNDO BLOCO
		SET @DATA = GETDATE()
		SET @USUARIO = SUSER_NAME()
		SET @ACAO = 'VALOR INSERIDO PELA TRIGGER TRG_ATUALIZA_PRECO'

		INSERT INTO HISTORICO
		(PRODUTO,CATEGORIA,PRECO_ANTIGO,PRECO_NOVO,DATA,USUARIO,MENSAGEM)
		VALUES
		(@PRODUTO,@CATEGORIA,@PRECO,@PRECO_NOVO,@DATA,@USUARIO,@ACAO)

		PRINT 'TRIGGER EXECUTADA COM SUCESSO'
END
GO

UPDATE PRODUTOS SET PRECO = 300.00
WHERE ID_PRODUTO = 2
GO

SELECT * FROM HISTORICO
GO

UPDATE PRODUTOS SET NOME = 'LIVRO JAVA'
WHERE ID_PRODUTO = 2
GO

/* VARIAVEIS COM SELECT */

SELECT 10 + 10
GO

CREATE TABLE RESULTADO(
	ID_RESULTADO INT PRIMARY KEY IDENTITY,
	RESULTADO INT
)
GO

INSERT INTO RESULTADO VALUES((SELECT 10 + 10))
GO

SELECT * FROM RESULTADO
GO

/* ATRIBUINDO SELECTS A VARIAVEIS - BLOCO ANONIMO (NÃO É ARMAZENADO EM BANCO) */

DECLARE
		@RESULTADO INT
		SET @RESULTADO = (SELECT 50 + 50)
		INSERT INTO RESULTADO VALUES(@RESULTADO)
		GO
		


DECLARE
		@RESULTADO INT
		SET @RESULTADO = (SELECT 50 + 50)
		INSERT INTO RESULTADO VALUES(@RESULTADO)
		PRINT 'VALOR INSERIDO NA TABELA: ' + CAST(@RESULTADO AS VARCHAR)
		GO
		

/* TRIGGER UPDATE */

CREATE TABLE EMPREGADO(
	ID_EMP INT PRIMARY KEY,
	NOME VARCHAR(30),
	SALARIO MONEY,
	FK_ID_GERENTE INT
)
GO

ALTER TABLE EMPREGADO ADD CONSTRAINT FK_GERENTE
FOREIGN KEY(FK_ID_GERENTE) REFERENCES EMPREGADO(ID_EMP)
GO


INSERT INTO EMPREGADO VALUES(1,'CLARA',5000.00,NULL)
INSERT INTO EMPREGADO VALUES(2,'CELIA',4000.00,1)
INSERT INTO EMPREGADO VALUES(3,'JOAO',4000.00,1)
GO

CREATE TABLE HIST_SALARIO(
	ID_EMPREGADO INT,
	ANTIGO_SAL MONEY,
	NOVO_SAL MONEY,
	DATA DATETIME
)
GO

CREATE TRIGGER TG_SALARIO
ON DBO.EMPREGADO
FOR UPDATE AS
IF UPDATE(SALARIO)
BEGIN
	 INSERT INTO HIST_SALARIO
	 (ID_EMPREGADO,ANTIGO_SAL,NOVO_SAL,DATA)
	 SELECT D.ID_EMP,D.SALARIO,I.SALARIO,GETDATE()
	 FROM DELETED D, inserted I
	 /* NO WHERE EU ESTOU PROPSIANDO ALTERAR NA TABELA TODA */
	 WHERE D.ID_EMP = I.ID_EMP
END
GO

UPDATE EMPREGADO SET SALARIO = SALARIO * 1.1
GO

SELECT * FROM EMPREGADO
GO

SELECT * FROM HIST_SALARIO
GO

/* QUERY COM SIMBOLO DE MOEDA EURO */
SELECT NOME, FORMAT(SALARIO,'C', 'be-BE') FROM EMPREGADO
GO

/* SALARIO ANTIGO, NOVO, DATA E NOME DO EMPREGO */

CREATE TABLE SALARIO_RANGE(
	MIN_SAL MONEY,
	MAX_SAL MONEY
)
GO

INSERT INTO SALARIO_RANGE VALUES(3000.00,6000.00)
GO

CREATE TRIGGER TG_RANGE
ON DBO.EMPREGADO
FOR INSERT,UPDATE
AS 
	DECLARE
		@MIN_SAL MONEY,
		@MAX_SAL MONEY,
		@ATUAL_SAL MONEY

	SELECT @MIN_SAL = MIN_SAL, @MAX_SAL = MAX_SAL FROM SALARIO_RANGE

	SELECT @ATUAL_SAL = I.SALARIO
	FROM INSERTED I

	IF(@ATUAL_SAL < @MIN_SAL)
	BEGIN
			RAISERROR('SALARIO MENOR QUE O PISO',16,1)
			ROLLBACK TRANSACTION
	END

	IF(@ATUAL_SAL > @MAX_SAL)
	BEGIN
			RAISERROR('SALARIO MAIOR QUE O TETO',16,1)
			ROLLBACK TRANSACTION
	END
GO

UPDATE EMPREGADO SET SALARIO = 9000.00
WHERE ID_EMP = 1
GO

UPDATE EMPREGADO SET SALARIO = 1000.00
WHERE ID_EMP = 1
GO

/* VERIFICANDO O TEXTO DE NA TRIGGER */

SP_HELPTEXT TG_RANGE
GO

/* PROCEDURES */

--SP_ STORAGE PROCEDURE

CREATE TABLE PESSOA(
	ID_PESSOA INT PRIMARY KEY IDENTITY,
	NOME VARCHAR(30) NOT NULL,
	SEXO CHAR(1) NOT NULL CHECK (SEXO IN('M','F')), --ENUM
	MASCIMENTO DATE NOT NULL
)
GO

/* USAR COLCHETES PARA ALTERAR NOME DE COLUNAS SE APRESENTAR ERRO */
/* SP_RENAME 'NOME_TABELA.NOME_COLUNA_ANTIGA', 'NOME_COLUNA_NOVA', 'COLUMN'*/
SP_RENAME 'PESSOA.[PESSOA.NASCIMENTO]', 'NASCIMENTO', 'COLUMN'
GO

CREATE TABLE TELEFONE(
	ID_TELEFONE INT NOT NULL IDENTITY,
	TIPO CHAR(3) NOT NULL CHECK ( TIPO IN('CEL','COM')),
	NUMERO CHAR(10) NOT NULL,
	FK_ID_PESSOA INT
)
GO

ALTER TABLE TELEFONE ADD CONSTRAINT FK_TELEFONE_PESSOA
FOREIGN KEY(FK_ID_PESSOA) REFERENCES PESSOA(ID_PESSOA)
ON DELETE CASCADE
GO

INSERT INTO PESSOA VALUES('ANTONIO','M','1981-02-13')
INSERT INTO PESSOA VALUES('DANIEL','M','1985-03-18')
INSERT INTO PESSOA VALUES('CLEIDE','F','1979-10-13')
INSERT INTO PESSOA VALUES('MAFRA','M','1981-02-13')

SELECT @@IDENTITY -- GUARDA O ULTIMO IDENTITY INSERIDO NA SEÇÃO
GO

SELECT * FROM PESSOA

INSERT INTO TELEFONE VALUES('CEL','9879008',1)
INSERT INTO TELEFONE VALUES('COM','8757909',1)
INSERT INTO TELEFONE VALUES('CEL','9875890',2)
INSERT INTO TELEFONE VALUES('CEL','9347689',2)
INSERT INTO TELEFONE VALUES('COM','2998689',3)
INSERT INTO TELEFONE VALUES('COM','2098978',2)
INSERT INTO TELEFONE VALUES('CEL','9008679',3)
GO

/* CRIANDO A PROCEDURE ESTÁTICA */

CREATE PROC SOMA
AS
	SELECT 10 + 10 AS SOMA
GO

/* EXECUÇÃO DA PROCEDURE */

SOMA

/* MAIS PROFISSIONAL => BOA PRÁTICA */
EXEC SOMA
GO

/* DINAMICAS - COM PARAMETROS */
/* @ => VARIÁVEL LOCAL, @@ => VARIÁVEL GLOBAL (DISPONÍVEIS PARA QQ USUÁRIO DO BANCO DE DADOS) */

CREATE PROC CONTA @NUM1 INT, @NUM2 INT
AS
	SELECT @NUM1 + @NUM2 AS RESULTADO
GO

/* EXECUTANDO */

EXEC CONTA 90, 78
GO

/* APAGANDO A PROCEDURE */

DROP PROC CONTA
GO

/* PROCEDURES EM TABELAS */

SELECT NOME, NUMERO
FROM PESSOA
INNER JOIN TELEFONE
ON ID_PESSOA = FK_ID_PESSOA
WHERE TIPO = 'CEL'
GO

/* TRAZER OS TELEFONES DE ACORDO COM O TIPO INFORMADO */

CREATE PROC TELEFONES @TIPO CHAR(3)
AS
	SELECT NOME, NUMERO
	FROM PESSOA
	INNER JOIN TELEFONE
	ON ID_PESSOA = FK_ID_PESSOA
	WHERE TIPO = @TIPO
GO

EXEC TELEFONES 'CEL'
GO

EXEC TELEFONES 'COM'
GO

/* PARAMETROS DE OUTPUT */ 

SELECT TIPO, COUNT(*) AS QUANTIDADE
FROM TELEFONE
GROUP BY TIPO
GO

/* CRIANDO PROCEDURE COM PARAMETROS DE ENTRADA E PARAMETRO DE SAIDA */

CREATE PROCEDURE GETTIPO @TIPO CHAR(3), @CONTADOR INT OUTPUT
AS
	SELECT @CONTADOR = COUNT(*)
	FROM TELEFONE
	WHERE TIPO = @TIPO
	GO

/* EXECUCAO DA PROC COM PARAMETRO DE SAIDA */

/* TRANSACTION SQL -> LINGUAGEM QUE O SQL SERVER TRABALHA */

DECLARE @SAIDA INT
EXEC GETTIPO @TIPO = 'CEL', @CONTADOR = @SAIDA OUTPUT
SELECT @SAIDA
GO

DECLARE @SAIDA INT
EXEC GETTIPO 'CEL', @SAIDA OUTPUT
SELECT @SAIDA
GO

/* PROCEDURE DE CADASTRO */

CREATE PROC CADASTRO @NOME VARCHAR(30), @SEXO CHAR(1), @NASCIMENTO DATE,
@TIPO CHAR(3), @NUMERO VARCHAR(10)
AS
	DECLARE @FK INT

	INSERT INTO PESSOA VALUES(@NOME,@SEXO,@NASCIMENTO) --GERAR UM ID
	
	/* PARA ASSEGURAR QUE O FK VAI SER IGUAL AO ID_PESSOA GERADO PELO INSERT */
	SET @FK = (SELECT ID_PESSOA FROM PESSOA WHERE ID_PESSOA
	= @@IDENTITY)

	INSERT INTO TELEFONE VALUES(@TIPO,@NUMERO,@FK)
GO

CADASTRO 'JORGE','M','1981-01-01','CEL','97273822'  
GO

SELECT @@IDENTITY /* GUARDA O ÚLTIMO IDENTITY INSERIDO NA SEÇÃO  => NO PROC FOI O TELEFONE */
GO

SELECT P.*, T.*
FROM PESSOA P
INNER JOIN TELEFONE t
ON ID_PESSOA = FK_ID_PESSOA
GO

/* TSQL É UM BLOCO DE LINGUAGEM DE PROGRAMACAO.
PROGRAMAS SAO UNIDADES QUE PODEM SER CHAMADAS DE BLOCOS
ANÔNIMOS. BLOCOS ANONIMOS NAO RECEBEM NOME, POIS
NAO SAO SALVOS NO BANCO. CRIAMOS BLOCOS ANONIMOS QUANDO
IREMOS EXECUTA-LOS UMA SO VEZ OU TESTAR ALGO */

/* BLOCO DE EXECUÇÃO */

BEGIN
		PRINT 'PRIMEIRO BLOCO'
END
GO

/* BLOCOS DE ATRIBUICAO DE VARIAVEIS */

DECLARE
		@CONTADOR INT
BEGIN
		SET @CONTADOR = 5
		PRINT 'contador = ' @CONTADOR
END
GO

DECLARE
		@CONTADOR INT
BEGIN
		SET @CONTADOR = 5
		PRINT 'contador = ' + cast(@CONTADOR as varchar)
END
GO

SELECT @CONTADOR

/* NO SQL SERVER CADA COLUNA, VARIAVEL LOCAL, EXPRESSAO E PARAMETRO TEM UM TIPO. */

DECLARE

		@V_NUMERO NUMERIC(10,2) = 100.52,
		@V_DATA DATETIME = '20170207'
BEGIN
		PRINT 'VALOR NUMERICO: ' + CAST(@V_NUMERO AS VARCHAR)
		PRINT 'VALOR NUMERICO: ' + CONVERT(VARCHAR, @V_NUMERO)
		PRINT 'VALOR DE DATA: ' + CAST(@V_DATA AS VARCHAR)
		/* CONVERT(TIPO_DADOS, QUEM IMPRIMIR, FORMATO)*/
		PRINT 'VALOR DE DATA: ' + CONVERT(VARCHAR, @V_DATA, 121) /* FORMATO USA */
		PRINT 'VALOR DE DATA: ' + CONVERT(VARCHAR, @V_DATA, 120)
		PRINT 'VALOR DE DATA: ' + CONVERT(VARCHAR, @V_DATA, 105) /* FORMATO BRASIL */
END
GO

/* ATRIBUINDO RESULTADOS A UMA VARIAVEL */

CREATE TABLE CARROS(
	CARRO VARCHAR(20),
	FABRICANTE VARCHAR(30)
)
GO

INSERT INTO CARROS VALUES('KA','FORD')
INSERT INTO CARROS VALUES('FIESTA','FORD')
INSERT INTO CARROS VALUES('PRISMA','FORD')
INSERT INTO CARROS VALUES('CLIO','RENAULT')
INSERT INTO CARROS VALUES('SANDERO','RENAULT')
INSERT INTO CARROS VALUES('CHEVETE','CHEVROLET')
INSERT INTO CARROS VALUES('OMEGA','CHEVROLET')
INSERT INTO CARROS VALUES('PALIO','FIAT')
INSERT INTO CARROS VALUES('DOBLO','FIAT')
INSERT INTO CARROS VALUES('UNO','FIAT')
INSERT INTO CARROS VALUES('GOL','VOLKSWAGEN')
GO

/* COMENTA UM BLOCO COM VÁRIAS LINHAS */
-- COMENTA UMA LINHA

DECLARE 
		@V_CONT_FORD INT,
		@V_CONT_FIAT INT
BEGIN
		--METODO 1 - O SELECT PRECISA RETORNAR UMA SIMPLES COLUNA
		--E UM SO RESULTADO, COUNT(*)
		SET @V_CONT_FORD = (SELECT COUNT(*) FROM CARROS
		WHERE FABRICANTE = 'FORD')
		
		PRINT 'QUANTIDADE FORD: ' + CAST(@V_CONT_FORD AS VARCHAR)

		--METODO 2 (A VARIÁVEL @V_CONT_FIAT, ESTÁ DENTRO DO SELECT)
		SELECT @V_CONT_FIAT = COUNT(*) FROM CARROS WHERE FABRICANTE = 'FIAT'

		PRINT 'QUANTIDADE FIAT: ' + CONVERT(VARCHAR, @V_CONT_FIAT)

END
GO

/* BLOCOS IF E ELSE 
BLOCO NOMEADO - PROCEDURES
*/

DECLARE
		@NUMERO INT = 6 --DINAMICO
BEGIN
		IF @NUMERO = 5 -- EXPRESSAO BOOLEANA - TRUE
			PRINT 'O VALOR É VERDADEIRO'
		ELSE
			PRINT 'O VALOR É FALSO'
END
GO

/* CASE => PODEMOS TER VÁRIOS CASES PARA VÁRIAS COLUNAS, BASTA ACRESCENTAR MAIS BLOCOS CASES */

DECLARE
		@CONTADOR INT
BEGIN
		SELECT -- O CASE REPRESENTA UMA COLUNA
		CASE
			WHEN FABRICANTE = 'FIAT' THEN 'FAIXA 1'
			WHEN FABRICANTE = 'CHEVROLET' THEN 'FAIXA 2'
			ELSE 'OUTRAS FAIXAS'
		END AS "INFORMACOES",
		* FROM CARROS
END
GO

		SELECT -- O CASE REPRESENTA UMA COLUNA
		CASE
			WHEN FABRICANTE = 'FIAT' THEN 'FAIXA 1'
			WHEN FABRICANTE = 'CHEVROLET' THEN 'FAIXA 2'
			ELSE 'OUTRAS FAIXAS'
		END AS "INFORMACOES",
		*
		FROM CARROS
		
/* CRIANDO UMA PROCEDUTE PARA VERIFICAR UM NUMERO */

CREATE PROC CHECK_NUM @NUMERO INT OUTPUT
AS

BEGIN
		IF @NUMERO = 5 -- EXPRESSAO BOOLEANA - TRUE
			PRINT 'O VALOR É VERDADEIRO'
		ELSE
			PRINT 'O VALOR É FALSO'
END
GO

EXEC CHECK_NUM 6
GO

/* LOOPS WHILE => NÃO ESQUECER DE EVITAR LOOP INFINITO INCREMENTANDO (SET @I = @I + 1) */

DECLARE
	@i INT = 1
BEGIN
	WHILE (@I < 15)
		BEGIN
			PRINT 'VALOR DE @I = ' + CAST(@I AS VARCHAR)
			SET @I = @I + 1
		END
END
GO